/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashtable;

import treeIntersection.BinaryTree;
import treeIntersection.Node;
import treeIntersection.Tree;

import java.util.HashMap;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());


      HashTable<String, Integer> stringIntegerHashTable = new HashTable<>();
      stringIntegerHashTable.add("John", 300);
      stringIntegerHashTable.add("sanaa", 400);
      stringIntegerHashTable.add("Tom", 200);
      stringIntegerHashTable.add("Jade", 100);
      stringIntegerHashTable.add("Doa", 600);
      stringIntegerHashTable.add("Farah", 700);
      stringIntegerHashTable.add("Jason", 90000);
      stringIntegerHashTable.add("Morgan", 800);
      stringIntegerHashTable.add("Naim", 1000);
      stringIntegerHashTable.add("Qusai", 1500);
      stringIntegerHashTable.add("Deyaa", 10000);

//      System.out.println("The Integer is => " + stringIntegerHashTable.get("Jade"));
//      System.out.println("The index is => " + stringIntegerHashTable.hash("Morgan"));
//      System.out.println("Is contain ? => " + stringIntegerHashTable.contains("abrar"));
//      System.out.println("Is contain ? => " + stringIntegerHashTable.contains("Jason"));

      System.out.println(HashTable.repeatedWord("It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didnâ€™t know what I was doing in New York..."));

      BinaryTree<Integer> firstBinaryTree = new BinaryTree<>(new Node<>(5));
      Node<Integer> node1 = new Node<>(2);
      Node<Integer> node2 = new Node<>(4);
      Node<Integer> node3 = new Node<>(1, node1, node2);
      Node<Integer> node5 = new Node<>(6);
      Node<Integer> node4 = new Node<>(5, node5, null);
      firstBinaryTree.root.right = node4;
      firstBinaryTree.root.left = node3;

      BinaryTree<Integer> secondBinaryTree = new BinaryTree<>(new Node<>(45));
      Node<Integer> node6 = new Node<>(2);
      Node<Integer> node7 = new Node<>(12);
      Node<Integer> node8 = new Node<>(1, node6, node7);
      Node<Integer> node9 = new Node<>(9);
      Node<Integer> node10 = new Node<>(5, node9, null);
      secondBinaryTree.root.right = node10;
      secondBinaryTree.root.left = node8;

//      System.out.println(Tree.treeIntersection(firstBinaryTree, secondBinaryTree));


      HashMap hashMap=new HashMap();
      hashMap.put("keyOne","1");
      hashMap.put("keyTow","2");
      hashMap.put("keyThree","3");
      hashMap.put("keyFour","4");

      HashMap hashMapTow=new HashMap();
      hashMapTow.put("keyOne","11");
      hashMapTow.put("keyTow","22");
      hashMapTow.put("keyThree","33");
      hashMapTow.put("Not exist ","");

      System.out.println(HashTable.hashMapLeftJoinFun(hashMap,hashMapTow));
    }

}
