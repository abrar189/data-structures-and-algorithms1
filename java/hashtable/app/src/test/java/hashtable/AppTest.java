/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashtable;

import org.junit.jupiter.api.Test;
import treeIntersection.BinaryTree;
import treeIntersection.Node;
import treeIntersection.Tree;

import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
  @Test
  void appHasAGreeting() {
    App classUnderTest = new App();
    assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
  }

  @Test
  void HashTableTest() {
    HashTable HashFun = new HashTable();

//   Adding a key/value to your hashtable results in the value being in the data structure
    HashFun.add("John", 300);
    assertEquals(9, HashFun.hash("John"));

//    Retrieving based on a key returns the value stored
    assertEquals(300, HashFun.get("John"));

//    Successfully returns null for a key that does not exist in the hashtable
    assertEquals(null, HashFun.get("null"));

//    contains function indicating if the key exists in the table already.
    assertEquals(true, HashFun.contains("John"));
    assertEquals(false, HashFun.contains("abrar"));


  }

  @Test
  void repeatedWordTest() {
    HashTable repeatWord = new HashTable();

    assertEquals("was", HashTable.repeatedWord("Once was upon a time,was there was a brave princess who"));
  }


  @Test
  void treeTest() {
    BinaryTree<Integer> firstBinaryTree = new BinaryTree<>(new Node<>(5));
    Node<Integer> node1 = new Node<>(2);
    Node<Integer> node2 = new Node<>(4);
    Node<Integer> node3 = new Node<>(1, node1, node2);
    Node<Integer> node5 = new Node<>(6);
    Node<Integer> node4 = new Node<>(5, node5, null);
    firstBinaryTree.root.right = node4;
    firstBinaryTree.root.left = node3;

    BinaryTree<Integer> secondBinaryTree = new BinaryTree<>(new Node<>(45));
    Node<Integer> node6 = new Node<>(2);
    Node<Integer> node7 = new Node<>(12);
    Node<Integer> node8 = new Node<>(1, node6, node7);
    Node<Integer> node9 = new Node<>(9);
    Node<Integer> node10 = new Node<>(5, node9, null);
    secondBinaryTree.root.right = node10;
    secondBinaryTree.root.left = node8;
    assertEquals("[1, 2, 5]", Tree.treeIntersection(firstBinaryTree, secondBinaryTree).toString());

  }

  @Test
  void lefteJoinTest()  {

    HashMap hashMap=new HashMap();
    hashMap.put("keyOne","1");
    hashMap.put("keyTow","2");
    hashMap.put("keyThree","3");
    hashMap.put("keyFour","4");

    HashMap hashMapTow=new HashMap();
    hashMapTow.put("keyOne","11");
    hashMapTow.put("keyTow","22");
    hashMapTow.put("keyThree","33");
    hashMapTow.put("Not exist ","");

    assertEquals("{keyThree= 3,33 , keyTow= 2,22 , keyOne= 1,11 , keyFour= 4,null }",HashTable.hashMapLeftJoinFun(hashMap,hashMapTow).toString());
  }
}
