/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challengs;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
  @Test void pushStack(){
    Stack stack= new Stack();
    stack.push("A");
    assertEquals(
      "A",
      "A",
      stack.toString()
    );
  }
  @Test
  public void testPushMultipleValueStack() {
    Stack stack = new Stack();
    stack.push("A");
    stack.push("B");
    stack.push("R");
    stack.push("A");
    stack.push("R");

    assertEquals(
      "ABRAR",
      "ABRAR",
      stack.toString()
    );
  }
  @Test
  void testPopStack() {
    Stack stack = new Stack();
    stack.push("A");
    stack.push("B");
    stack.push("R");
    stack.push("A");
    stack.push("R");
    stack.pop();
    stack.pop();
    stack.pop();
    stack.pop();
    stack.pop();
    assertEquals(true,stack.isEmpty());
  }
  @Test void testpeekStack() {
    Stack stack=new Stack();
    stack.push("A");
    stack.push("B");
    String res="B";
    assertEquals(res,stack.peek());
  }
  @Test void testenqueueOnevalue() {
    Queue queue=new Queue();
    queue.enqueue("a");
    String front="a";
    assertEquals(false,queue.isEmpty());
    assertEquals(front,queue.front.data);

  }
  @Test void testenqueueMultiplevalue() {
    Queue queue=new Queue();
    queue.enqueue("a");
    queue.enqueue("b");
    queue.enqueue("c");
    String resfront="a";
    String resrear="c";
    assertEquals(false,queue.isEmpty());
    assertEquals(resfront,queue.front.data);
    assertEquals(resrear,queue.rear.data);
  }
  @Test void testdequeue() {
    Queue queue=new Queue();
    queue.enqueue("H");
    queue.enqueue("m");
    queue.dequeue();
    queue.dequeue();
    assertEquals(true,queue.isEmpty());
  }

  @Test void testpeekQueue() {
    Queue queue=new Queue();
    queue.enqueue("A");
    queue.enqueue("B");
    queue.enqueue("C");
    queue.dequeue();
    String res="B";
    assertEquals(res,queue.peek());
  }
  @Test
  public void testIsEmptyStack() {
    Stack stack = new Stack();
    assertEquals(true,stack.isEmpty());

  }
  @Test
  public void testIsEmptyQueue() {
    Queue queue = new Queue();
    queue.enqueue("A");
    assertEquals(false,queue.isEmpty());


  }

  @Test
  public void ValidateBracketsTest() {

    StackBracket data2 =new StackBracket();

    assertFalse( data2.ValidateBrackets("[(}))"), "false");
    assertTrue(data2.ValidateBrackets("()[]()"), "true");

  }


}
